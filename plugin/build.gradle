import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files
import java.nio.file.Path
import java.util.stream.Collectors

plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

jar {
    baseName "${rootProject.name}"
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.dmulloy2.net/repository/public/"
    }
}

dependencies {
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"
    //compileOnly "com.comphenix.protocol:ProtocolLib:4.7.0"
    //compileOnly fileTree(dir: "../libs/", include: "patched_1.16.5.jar")
    //implementation "dev.kotx:flylib-reloaded:0.4.1"
}
//import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
//task relocateShadow(type: ConfigureShadowRelocation) {
//    target = tasks.shadowJar
//    prefix = project.group
//}
//tasks.shadowJar.dependsOn tasks.relocateShadow

shadowJar {
    exclude "META-INF/*"
    archiveFileName = "${rootProject.name}-${version}.jar"
}
tasks.build.dependsOn tasks.shadowJar

task copyBuildToServer(group: "copy", type: Copy) {
    mustRunAfter shadowJar
    from new File(buildDir.absolutePath, "libs/${rootProject.name}-${version}.jar")
    into "../server/plugins"
}

task copyProtocolLibToServer(group: "copy", type: Copy) {
    File file = configurations.compileClasspath.getFiles().stream()
            .filter(x -> x.getName().matches(".*ProtocolLib.*.jar"))
            .findFirst().orElse(null)
    if (file != null) {
        from file
        into "../server/plugins"
    }
}

task buildServer(group: "build") {
    dependsOn shadowJar, copyBuildToServer
}

task buildPluginAndCopy(group: "build") {
    dependsOn build, shadowJar, copyBuildToServer
}

processResources {
    filteringCharset "UTF-8"
    filesMatching("**/plugin.yml") {
        filter(ReplaceTokens, tokens: [
                "name"     : rootProject.name,
                "version"  : version,
                "MainClass": getMainClassFQDN(projectDir.toPath())
        ])
    }
}

static String getMainClassFQDN(Path projectPath) {
    List<Path> javaFileList = Files.walk(projectPath)
            .filter(x -> x.getFileName().toString().endsWith(".java"))
            .collect(Collectors.toList())
    Path mainClassFile = javaFileList.stream()
            .filter(path -> Files.lines(path).anyMatch(str -> str.contains("extends JavaPlugin")))
            .findFirst().get()
    return mainClassFile.toString().replace('\\', '.').replace('/', '.').replaceAll(".*src.main.java.|.java\$", "")
}