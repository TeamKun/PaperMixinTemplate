import java.nio.file.Files
import java.nio.file.StandardCopyOption

allprojects {
    apply plugin: "java"

    group "net.kunmc.lab"
    version "1.0.0"

    def targetJavaVersion = 8
    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release = targetJavaVersion
        }
    }
}

task generatePatchedJar(group: "setup") {
    File tmpDir = new File(projectDir.toPath().toAbsolutePath().toString() + "/tmp")
    File tmpPatchedJar = new File(tmpDir.toPath().toAbsolutePath().toString() + "/cache/patched_1.16.5.jar")
    File serverJar = new File(tmpDir.toPath().toAbsolutePath().toString() + "/tmpserver.jar")
    File patchedJar = new File(projectDir.toPath().toAbsolutePath().toString() + "/libs/patched_1.16.5.jar")

    if (patchedJar.exists()) {
        return
    }

    tmpDir.mkdir()
    URL url = new URL("https://api.papermc.io/v2/projects/paper/versions/1.16.5/builds/790/downloads/paper-1.16.5-790.jar ")
    try (InputStream stream = url.openStream()) {
        Files.copy(stream, serverJar.toPath(), StandardCopyOption.REPLACE_EXISTING)
    }

    try {
        Runtime runtime = Runtime.getRuntime()
        Process p = runtime.exec("java -jar " + serverJar.toPath().toAbsolutePath().toString() + " nogui", new String[0], tmpDir)
        p.waitFor()
        p.destroy()
    } catch (Exception e) {
        e.printStackTrace()
    }

    Files.copy(tmpPatchedJar.toPath(), patchedJar.toPath(), StandardCopyOption.REPLACE_EXISTING)
    delete(tmpDir)
}

static void delete(File file) {
    if (!file.exists()) {
        return
    }

    if (file.isDirectory()) {
        for (File child : file.listFiles()) {
            delete(child)
        }
    }

    file.delete()
}
